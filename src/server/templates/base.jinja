<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
        <!-- Search Engine Meta Tags -->
        <meta name="description"
              content="Your AI-powered companion for open source contributions. Navigate, understand and improve code with Forky!">
        <meta name="keywords"
              content="Forky, AI assistant, Open Source, Code Review, Pull Requests, GitHub, Code Navigation, AI Code Helper, Repository Explorer">
        <meta name="robots" content="index, follow">
        <!-- Favicons -->
        <link rel="icon" type="image/svg+xml" href="/static/favicon.svg">
        <link rel="icon"
              type="image/png"
              sizes="64x64"
              href="/static/favicon-64.png">
        <link rel="apple-touch-icon"
              sizes="180x180"
              href="/static/apple-touch-icon.png">
        <!-- Web App Meta -->
        <meta name="apple-mobile-web-app-title" content="Forky">
        <meta name="application-name" content="Forky">
        <meta name="theme-color" content="#FF6B6B">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="default">
        <!-- OpenGraph Meta Tags -->
        <meta property="og:title" content="Forky - Your AI Code Companion">
        <meta property="og:description"
              content="Navigate repos, understand code, and improve pull requests with real-time AI magic powered by Gemini 2.0">
        <meta property="og:type" content="website">
        <meta property="og:url" content="{{ request.url }}">
        <meta property="og:image" content="/static/og-image.png">
        <title>
            {% block title %}Forky{% endblock %}
        </title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script>
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            'forky-red': '#FF6B6B',
                            'forky-blue': '#4ECDC4',
                            'forky-yellow': '#FFD93D',
                            'forky-cream': '#FFF6E9',
                        }
                    }
                }
            }
        </script>
        <script src="/static/js/utils.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
        <script>
            // Global chat functions
            function addMessageToChat(role, content, format = null) {
                const messagesContainer = document.getElementById('chat-messages');
                if (!messagesContainer) return;

                const messageDiv = document.createElement('div');
                messageDiv.className = 'animate-fade-in';
                const timestamp = new Date().toLocaleTimeString();

                // Format the content if it's markdown
                const formattedContent = format === 'markdown'
                    ? marked.parse(content)  // Use marked.js to parse markdown
                    : `<p class="text-sm text-gray-900">${content}</p>`;

                if (role === 'user') {
                    messageDiv.innerHTML = `
                        <div class="flex items-start gap-2.5 flex-row-reverse">
                            <div class="w-8 h-8 rounded-full bg-gray-100 border-2 border-gray-900 flex items-center justify-center text-gray-900 font-bold">
                                U
                            </div>
                            <div class="flex flex-col gap-1 w-full max-w-[320px]">
                                <div class="flex items-center space-x-2 flex-row-reverse">
                                    <span class="text-sm font-semibold text-gray-900">You</span>
                                    <span class="text-sm text-gray-500">${timestamp}</span>
                                </div>
                                <div class="flex flex-col leading-1.5 p-4 border-[2px] border-gray-900 bg-gray-100 rounded-s-xl rounded-ee-xl">
                                    ${formattedContent}
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    messageDiv.innerHTML = `
                        <div class="flex items-start gap-2.5">
                            <div class="w-8 h-8 rounded-full bg-gradient-to-r from-[#4ECDC4] to-[#FF6B6B] flex items-center justify-center text-white font-bold">
                                AI
                            </div>
                            <div class="flex flex-col gap-1 w-full max-w-[80%]">
                                <div class="flex items-center space-x-2">
                                    <span class="text-sm font-semibold text-gray-900">Forky</span>
                                    <span class="text-sm text-gray-500">${timestamp}</span>
                                </div>
                                <div class="flex flex-col leading-1.5 p-4 border-[2px] border-gray-900 bg-[#4ECDC4]/10 rounded-e-xl rounded-es-xl overflow-hidden">
                                    <div class="prose prose-sm max-w-full overflow-x-auto">
                                        ${formattedContent}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }

                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            function sendChatMessage() {
                const input = document.getElementById('chat-input');
                if (!input) return;

                const message = input.value.trim();
                if (!message) return;

                // Add user message to chat
                addMessageToChat('user', message);

                // Create FormData
                const formData = new FormData();
                formData.append('message', message);

                // Add repository context - using the direct summary and content from the analysis
                const summary = document.querySelector('[data-summary]')?.textContent;
                const content = document.querySelector('[data-content]')?.textContent;

                if (summary) formData.append('repo_summary', summary);
                if (content) formData.append('repo_content', content);

                // Clear input
                input.value = '';

                // Send to backend
                fetch('/chat', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.error) throw new Error(data.error);
                    addMessageToChat('assistant', data.response, data.format);
                })
                .catch(error => {
                    console.error('Error:', error);
                    addMessageToChat('assistant', 'Sorry, there was an error processing your request.');
                });
            }

            // Initialize chat functionality when document is ready
            document.addEventListener('DOMContentLoaded', function() {
                const input = document.getElementById('chat-input');
                if (input) {
                    input.addEventListener('keydown', function(e) {
                        if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault();
                            sendChatMessage();
                        }
                    });
                }
            });
        </script>
        <script>
        !function (t, e) { var o, n, p, r; e.__SV || (window.posthog = e, e._i = [], e.init = function (i, s, a) { function g(t, e) { var o = e.split("."); 2 == o.length && (t = t[o[0]], e = o[1]), t[e] = function () { t.push([e].concat(Array.prototype.slice.call(arguments, 0))) } } (p = t.createElement("script")).type = "text/javascript", p.crossOrigin = "anonymous", p.async = !0, p.src = s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") + "/static/array.js", (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r); var u = e; for (void 0 !== a ? u = e[a] = [] : a = "posthog", u.people = u.people || [], u.toString = function (t) { var e = "posthog"; return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e }, u.people.toString = function () { return u.toString(1) + ".people (stub)" }, o = "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug getPageViewId".split(" "), n = 0; n < o.length; n++)g(u, o[n]); e._i.push([i, s, a]) }, e.__SV = 1) }(document, window.posthog || []);
        posthog.init('phc_9aNpiIVH2zfTWeY84vdTWxvrJRCQQhP5kcVDXUvcdou', {
            api_host: 'https://eu.i.posthog.com',
            person_profiles: 'always',
        })
        </script>
        {% block extra_head %}{% endblock %}
    </head>
    <body class="bg-forky-cream min-h-screen flex flex-col">
        {% include 'components/navbar.jinja' %}
        <!-- Main content wrapper -->
        <main class="flex-1 w-full">
            <div class="max-w-5xl mx-auto px-6 py-10">
                {% block content %}{% endblock %}
            </div>
        </main>
        {% include 'components/footer.jinja' %}
        {% block extra_scripts %}{% endblock %}
    </body>
</html>
